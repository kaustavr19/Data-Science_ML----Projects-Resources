# -*- coding: utf-8 -*-
"""Data Cleaning_Missing value imputation sklearn II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CsYwOPUGRoh6L0Az6ehwgHqBmvtjBc_F

# Data Cleaning
## Missing value imputation using Scikit-Learn
### Different strategy for Different variables
"""

import numpy as np
import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

train = pd.read_csv(r"K:\KaustavR25\SKILLZ\Data Science & Analysis, ML\Data-Science_ML----Projects-Resources-main\Study & Resource\Data Cleaning\train.csv")
test = pd.read_csv(r"K:\KaustavR25\SKILLZ\Data Science & Analysis, ML\Data-Science_ML----Projects-Resources-main\Study & Resource\Data Cleaning\test.csv")
print("shape of train df = ", train.shape)
print("shape of test df = ", test.shape)

X_train = train.drop(columns='SalePrice', axis=1)
y_train = train['SalePrice']
X_test = test.copy()
print("shape of X_train df = ", X_train.shape)
print("shape of y_train df = ", y_train.shape)
print("shape of X_test df = ", X_test.shape)

"""## Missing value Imputation"""

isnull_sum = X_train.isnull().sum()
isnull_sum

num_vars = X_train.select_dtypes(include=['int64', 'float64']).columns
num_vars_miss = [var for var in num_vars if isnull_sum[var]>0]

num_vars_miss

cat_vars = X_train.select_dtypes(include=['O']).columns
cat_vars_miss = [var for var in cat_vars if isnull_sum[var]>0]
cat_vars_miss

num_var_mean = ["LotFrontage"]
num_var_median = ['MasVnrArea', 'GarageYrBlt']
cat_vars_mode = ['Alley',
 'MasVnrType',
 'BsmtQual',
 'BsmtCond',
 'BsmtExposure',
 'BsmtFinType1',
 'BsmtFinType2',
 'Electrical',
 'FireplaceQu',]
cat_vars_missing = ['GarageType',
 'GarageFinish',
 'GarageQual',
 'GarageCond',
 'PoolQC',
 'Fence',
 'MiscFeature']

num_var_mean_imputer = Pipeline(steps=[("imputer", SimpleImputer(strategy="mean"))])
num_var_median_imputer = Pipeline(steps=[("imputer", SimpleImputer(strategy="median"))])
cat_vars_mode_imputer = Pipeline(steps=[("imputer", SimpleImputer(strategy="most_frequent"))])
cat_vars_missing_imputer = Pipeline(steps=[("imputer", SimpleImputer(strategy="constant", fill_value="missing"))])

preprocessor = ColumnTransformer(transformers=[("mean_imputer", num_var_mean_imputer, num_var_mean),
                                ("median_imputer", num_var_median_imputer, num_var_median),
                               ("mode_imputer", cat_vars_mode_imputer, cat_vars_mode),
                               ("missing_imputer", cat_vars_missing_imputer,cat_vars_missing)])

preprocessor.fit(X_train)

preprocessor.transform

preprocessor.named_transformers_["mean_imputer"].named_steps["imputer"].statistics_

train["LotFrontage"].mean()

preprocessor.named_transformers_["mode_imputer"].named_steps["imputer"].statistics_

preprocessor.named_transformers_["missing_imputer"].named_steps["imputer"].statistics_

X_train_clean = preprocessor.transform(X_train)
X_test_clean = preprocessor.transform(X_test)

X_train_clean

preprocessor.transformers_

X_train_clean_miss_var = pd.DataFrame(X_train_clean, columns=num_var_mean+num_var_median+cat_vars_mode+cat_vars_missing)

X_train_clean_miss_var.head()

X_train_clean_miss_var.isnull().sum().sum()

train["Alley"].value_counts()

X_train_clean_miss_var["Alley"].value_counts()

X_train_clean_miss_var["MiscFeature"].value_counts()

"""## Create Clean X_train DataFrame with call variables"""

remainder_vars_index = [0,
   1,
   2,
   4,
   5,
   7,
   8,
   9,
   10,
   11,
   12,
   13,
   14,
   15,
   16,
   17,
   18,
   19,
   20,
   21,
   22,
   23,
   24,
   27,
   28,
   29,
   34,
   36,
   37,
   38,
   39,
   40,
   41,
   43,
   44,
   45,
   46,
   47,
   48,
   49,
   50,
   51,
   52,
   53,
   54,
   55,
   56,
   61,
   62,
   65,
   66,
   67,
   68,
   69,
   70,
   71,
   75,
   76,
   77,
   78,
   79]

# get no missing values variables name using there index
remainder_vars = [isnull_sum.keys()[var_index] for var_index in remainder_vars_index]
remainder_vars

len(remainder_vars)

# concatinate X_train_clean_miss_var df and remainder_vars
X_train =  pd.concat([X_train_clean_miss_var,train[remainder_vars]], axis=1)

X_train.shape

X_train.isnull().sum().sum()

# Create test DataFrame with missing value imputed variables
X_test_clean_miss_var = pd.DataFrame(X_test_clean, columns=num_var_mean+num_var_median+cat_vars_mode+cat_vars_missing)
X_test_clean_miss_var.shape

X_test_clean_miss_var.isnull().sum().sum()

# concatinate X_test_clean_miss_var df and remainder_vars
X_test =  pd.concat([X_test_clean_miss_var,test[remainder_vars]], axis=1)
X_test.shape

X_test.isnull().sum().sum()

isnull_sum_test = X_test.isnull().sum()
isnull_sum_test

# finding the numerical variable which have mising value
num_vars_test = X_test.select_dtypes(include=["int64", "float64"]).columns
num_vars_miss_test = [var for var in num_vars_test if isnull_sum_test[var]>0]
num_vars_miss_test

# finding the categorical variable which have mising value
cat_vars_test = X_test.select_dtypes(include=["O"]).columns
cat_vars_miss_test = [var for var in cat_vars_test if isnull_sum_test[var]>0]
cat_vars_miss_test

