# -*- coding: utf-8 -*-
"""Matplotlib_tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WqUzb4oihDrOI_RQMXbH-ecn6pqK_okE
"""

from google.colab import drive
drive.mount('/content/gdrive') #for importing files from g-drive

"""## Matplotlib Line Plot

The pyplot.plot() or plt.plot() is a method of matplotlib pyplot module use to plot the line.

> Syntax: plt.plot(*args, scalex=True, scaley=True, data=None, **kwargs)
"""

import matplotlib.pyplot as plt

days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
temperature = [36.6, 37, 37.7,39,40.1,43,43.4,45,45.6,40.1,44,45,46.8,47,47.8]

plt.plot(days, temperature)
plt.show()

"""To show annotations on the axes

>Syntax: plt.xlabel(xlabel, fontdict=None, labelpad=None, **kwargs)

>Syntax: plt.ylabel(ylabel, fontdict=None, labelpad=None, **kwargs)

>Syntax: plt.title(label, fontdict=None, loc=‘center’, pad=None, **kwargs)
"""

#plotting with x,y -axes and title
plt.plot(days, temperature)
plt.title("Delhi Temperature")
plt.xlabel("days")
plt.ylabel("temperature")
plt.show()

"""to manually set the axis value for starting of the plot use plt.axis() method.

>Syntax: plt.axis(xmin, xmax, ymin, ymax)

"""

#set axis(setting points betweeb which the graph will be shown)
plt.plot(days, temperature)
plt.axis([0,30,0,50])
plt.title("Delhi Temperature")
plt.xlabel("days")
plt.ylabel("temperature")
plt.show()

plt.plot(days, temperature, color='g', marker='o', linestyle='--', markersize=10)
plt.title("Delhi Temperature")
plt.xlabel("days")
plt.ylabel("temperature")
plt.show()

plt.plot(days, temperature, color='r', marker='P', linestyle='-.', markersize=10)
plt.title("Delhi Temperature")
plt.xlabel("days")
plt.ylabel("temperature")
plt.show()

"""### Color Parameter Values

1. b	blue
2. g	green
3. r	red
4. c	cyan
5. m	magenta
6. y	yellow
7. k	black
8. w	white

### Marker Parameter Values

1. .	point marker
2. ,	pixel marker
3. o	circle marker
4. v	triangle_down marker
5. ^	triangle_up marker
6. <	triangle_left marker
7. '>'	triangle_right marker
8. 1	tri_down marker
9. 2	tri_up marker
10. 3	tri_left marker
11. 4	tri_right marker
12. s	square marker
13. p	pentagon marker
14. *	star marker
15. h	hexagon1 marker
16. H	hexagon2 marker
17. +	plus marker
18. x	x marker
19. D	diamond marker
20. d	thin_diamond marker
21. |	vline marker
22. _	hline marker

### Line Style parameters values

1. _	solid line style
2. —	dashed line style
3. _.	dash-dot line style
4. :	dotted line style

If you want to change the bar chart’s background color and add grid then use style.use() method. For this first, need to import the style module from matplotlib. 

>Syntax: style.use(style)

To add a legend in the graph to describe more information about it, use plt.legend().

>Syntax: plt.legend(*args, **kwargs)
"""

#adding legend 
from matplotlib import style
style.use("ggplot")
plt.plot(days, temperature, "mo--", linewidth=3, markersize=10, label="Temp line")
plt.title("Delhi Temperature")
plt.xlabel("days")
plt.ylabel("temperature")
plt.legend(loc=4)
plt.show()

"""### Multiple line plots"""

days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
delhi_tem = [36.6, 37, 37.7,39,40.1,43,43.4,45,45.6,40.1,44,45,46.8,47,47.8]
mumbai_tem = [39,39.4,40,40.7,41,42.5,43.5,44,44.9,44,45,45.1,46,47,46]
 
plt.plot(days, delhi_tem, "mo--", linewidth = 3,
        markersize = 10, label = "Delhi temp")
 
plt.plot(days, mumbai_tem, "yo:", linewidth = 3,
        markersize = 10, label = "Mumbai temp")
 
plt.title("Delhi  & Mumbai Temperature", fontsize=15)
plt.xlabel("days",fontsize=13)
plt.ylabel("temperature",fontsize=13)
plt.legend(loc = 4)
plt.show()

"""If you want to change or add grid then use plt.grid() method.

>Syntax: plt.grid(b=None, which=‘major’, axis=‘both’, **kwargs)
"""

#using grid
plt.plot(days, delhi_tem, "mo--", linewidth = 3,
        markersize = 10, label = "Delhi temp")
 
plt.plot(days, mumbai_tem, "yo:", linewidth = 3,
        markersize = 10, label = "Mumbai temp")
 
plt.title("Delhi  & Mumbai Temperature", fontsize=15)
plt.xlabel("days",fontsize=13)
plt.ylabel("temperature",fontsize=13)
plt.legend(loc = 4)
plt.grid(color='c', linestyle='-', linewidth=2) # grid with parameter
plt.show()

"""# Histograms

Matplotlib histogram is a representation of numeric data in the form of a rectangle bar. Each bar shows some data,  which belong to different categories. To plot histogram using python matplotlib library need plt.hist() method.

>Syntax: plt.hist(
x,
bins=None,
range=None,
density=None,
weights=None,
cumulative=False,
bottom=None,
histtype=’bar’,
align=’mid’,
orientation=’vertical’,
rwidth=None,
log=False,
color=None,
label=None,
stacked=False,
normed=None,
*,
data=None,
**kwargs,
)
"""

import matplotlib.pyplot as plt
import numpy as np
import random

ml_student_age = np.random.randint(18, 45, (100))
py_student_age = np.random.randint(18, 40, (100))
print(ml_student_age)
print(py_student_age)

plt.hist(ml_student_age)
 
plt.title("ML Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.show()

bins = [15,20,25,30,35,40,45] # category of ML students age on x axis
plt.figure(figsize = (16,9)) # size of histogram in 16:9 format
 
 
plt.hist(ml_student_age, bins, rwidth=0.8, histtype = "bar",
         orientation='vertical', color = "m", label = "ML Student")
 
plt.title("ML Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.legend()
plt.show()

"""#### Plotting two histograms using matplotlib with parameters"""

from matplotlib import style 
style.use("ggplot")
plt.figure(figsize=(16,9))

plt.hist([ml_student_age, py_student_age], bins, rwidth=0.8, histtype="bar",
         orientation='vertical', color=["m","y"],label=["ML Student","Py Student"])

plt.title("ML & Py Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.legend()
plt.show()

"""#Matplotlib Bar Chart
To visualize value associated with categorical data in the bar format use matplotlib bar chart plt.bar() or plt.barh() methods.
"""

import matplotlib.pyplot as plt
import numpy as np
from matplotlib import style

classes = ["Python", "R", "AI", "ML", "DS"]
class1_students = [30, 10, 20, 25, 10] # out of 100 student in each class
class2_students = [40, 5, 20, 20, 10]
class3_students = [35, 5, 30, 15, 15]

"""To plot bar chart using the matplotlib python library, use plt.bar() or plt.barh() methods.

>Syntax: plt.bar(x,height,width=0.8,bottom=None,*,align=’center’,data=None,**kwargs)

Parameters
———-
<br>x : sequence of scalars
<br>height : scalar or sequence of scalars
<br>width : scalar or array-like, optional …….(default: 0.8).
<br>bottom : scalar or array-like, optional
<br>align : {‘center’, ‘edge’}, optional, ……….default: ‘center’
<br>
<br>

Other Parameters
—————-
<br>color : scalar or array-like, optional
<br> edgecolor : scalar or array-like, optional
<br> linewidth : scalar or array-like, optional
<br>tick_label : string or array-like, optional ……. name of Bar
<br> xerr, yerr : scalar or array-like of shape(N,) or shape(2,N), optional
<br>ecolor : scalar or array-like, optional, default: ‘black’
<br>capsize : scalar, optional
<br>error_kw : dict, optional
<br>log : bool, optional, default: False
<br>orientation : {‘vertical’, ‘horizontal’}, optional


<br>


See also
——–
<br> barh: Plot a horizontal bar plot.

<br>

Other optional kwargs:
<br>agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array
<br>alpha: float or None
<br>animated: bool
<br>antialiased: unknown
<br>capstyle: {‘butt’, ’round’, ‘projecting’}
<br>clip_box: `.Bbox`
<br>clip_on: bool
<br>clip_path: [(`~matplotlib.path.Path`, `.Transform`) | `.Patch` | None]
<br>color: color
<br>contains: callable
<br>edgecolor: color or None or ‘auto’
<br>facecolor: color or None
<br>figure: `.Figure`
<br>fill: bool
<br>gid: str
<br>hatch: {‘/’, ‘\\’, ‘|’, ‘-‘, ‘+’, ‘x’, ‘o’, ‘O’, ‘.’, ‘*’}
<br>in_layout: bool
<br>joinstyle: {‘miter’, ’round’, ‘bevel’}
<br>label: object
<br>linestyle: {‘-‘, ‘–‘, ‘-.’, ‘:’, ”, (offset, on-off-seq), …}
<br>linewidth: float or None for default
<br>path_effects: `.AbstractPathEffect`
<br>picker: None or bool or float or callable
<br>rasterized: bool or None
<br>sketch_params: (scale: float, length: float, randomness: float)
<br>snap: bool or None
<br>transform: `.Transform`
<br>url: str
<br>visible: bool
<br>zorder: float
"""

plt.bar(classes, class1_students)

plt.barh(classes, class1_students)

"""#### Use multiple parameters of plt.bar() method"""

plt.bar(classes, class1_students, width = 0.2, align = "edge", color = "y",
       edgecolor = "m", linewidth = 5, alpha = 0.9, linestyle = "--",
       label =" Class 1 Students", visible=True)
#visible = false ## bar Chart will hide

#Increase figure size and use style.
style.use("ggplot") 
plt.figure(figsize=(16,9)) # figure size with ratio 16:9
plt.bar(classes, class1_students, width = 0.6, align = "edge", color = "k",
       edgecolor = "m", linewidth = 5, alpha = 0.9, linestyle = "--",
       label =" Class 1 Students")

style.use("ggplot") 
plt.figure(figsize=(16,9)) # figure size with ratio 16:9
plt.barh(classes, class1_students, align = "edge", color = "k",
       edgecolor = "m", linewidth = 5, alpha = 0.9, linestyle = "--",
       label =" Class 1 Students")

plt.figure(figsize=(16,9))
plt.bar(classes, class1_students, width = 0.6, align = "edge", color = "k",
       edgecolor = "m", linewidth = 5, alpha = 0.9, linestyle = "--",
       label =" Class 1 Students") 
 
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.xlabel("Classes",fontsize = 15)
plt.ylabel("No. of Students", fontsize = 15)
plt.show()

#Trying to plot two bar charts with a different dataset.
plt.figure(figsize=(16,9))
 
plt.bar(classes, class1_students, width = 0.2, color = "b",
        label =" Class 1 Students")
 
plt.bar(classes, class2_students, width = 0.2, color = "g",
        label =" Class 2 Students") 
 
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.xlabel("Classes",fontsize = 15)
plt.ylabel("No. of Students", fontsize = 15)
plt.show()

"""The above code is generating two bar charts in one figure but they are overlapping. So we use the below code to plot multiple bar charts. In below chart plot three bar charts using three different datasets."""

plt.figure(figsize=(16,9))
 
classes_index = np.arange(len(classes))
 
width = 0.2
 
plt.bar(classes_index, class1_students, width , color = "r",
        label =" Class 1 Students")
 
plt.bar(classes_index + width, class2_students, width , color = "b",
        label =" Class 2 Students") 
 
plt.bar(classes_index + width + width, class3_students, width , color = "g",
        label =" Class 2 Students") 
 
plt.xticks(classes_index + width, classes, rotation = 20)
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.xlabel("Classes",fontsize = 15)
plt.ylabel("No. of Students", fontsize = 15)
plt.show()

plt.figure(figsize=(16,9))
 
classes_index = np.arange(len(classes))
 
width = 0.2
 
plt.barh(classes_index, class1_students, width , color = "r",
        label =" Class 1 Students") 
 
plt.barh(classes_index + width, class2_students, width , color = "g",
        label =" Class 2 Students") 
 
plt.barh(classes_index + width + width, class3_students, width , color = "b",
        label =" Class 3 Students") 
 
plt.yticks(classes_index + width, classes, rotation = 20)
plt.title("Bar Chart of IAIP Class", fontsize = 18)
plt.ylabel("Classes",fontsize = 15)
plt.xlabel("No. of Students", fontsize = 15)
plt.legend()
plt.show()

"""# Matplotlib Pie Chart
To draw pie char use plt.pie() function. The matplotlib plt.pie() function help to plot pie chart of given numeric data with labels.
"""

import matplotlib.pyplot as plt

plt.pie([1]) # Plot pie chart of value [1]
plt.show() # To show Pie cha

classes = ["Python", 'R', 'Machine Learning', 'Artificial Intelligence', 
           'Data Sciece']
class1_students = [45, 15, 35, 25, 30]

#Plotting pie chart using real dataset
plt.pie(class1_students, labels = classes)
plt.show()

""">Syntax: plt.pie([‘x’,‘explode=None’,‘labels=None’,‘colors=None’,‘autopct=None’,
‘pctdistance=0.6’,‘shadow=False’,‘labeldistance=1.1’,‘startangle=None’,‘radius=None’,‘counterclock=True’,‘wedgeprops=None’,‘textprops=None’,‘center=(0, 0)’,‘frame=False’,‘rotatelabels=False’,‘*’,‘data=None’],)

<u>Parameters</u>:
<br>x : array-like
<br>explode : array-like, optional, default: None
<br>labels : list, optional, default: None
<br>colors : array-like, optional, default: None
<br>autopct : None (default), string, or function, optional
<br>pctdistance : float, optional, default: 0.6
<br>shadow : bool, optional, default: False
<br>labeldistance : float, optional, default: 1.1
<br>startangle : float, optional, default: None
<br>radius : float, optional, default: None
<br>counterclock : bool, optional, default: True
<br>wedgeprops : dict, optional, default: None
—- example, you can pass in wedgeprops = {‘linewidth’: 3}
<br>textprops : dict, optional, default: None
<br>center : list of float, optional, default: (0, 0)
<br>frame : bool, optional, default: False
<br>rotatelabels : bool, optional, default: False
"""

#plotting pie chart using different parameters

explode = [0.03,0,0.1,0,0] # To slice the particuler section
colors = ["c", 'b','r','m','y'] # Color of each section
textprops = {"fontsize":15} # Font size of text in pie chart
 
plt.pie(class1_students, # Values
        labels = classes, # Labels for each sections
        explode = explode, # To slice the particuler section
        colors =colors, # Color of each section
        autopct = "%0.2f%%", # Show data in percentage with 2 decimal point
        shadow = True, # Showing shadow of pie chart
        radius = 1.4, # Radius to increase or decrease the size of pie chart 
       startangle = 270, # Start angle of first section
        textprops =textprops) 
 
plt.show() # To show pie chart only

#plotting pie-chart with legend
#plotting pie chart using different parameters

explode = [0.03,0,0.1,0,0] # To slice the particuler section
colors = ["c", 'b','r','m','y'] # Color of each section
textprops = {"fontsize":15} # Font size of text in pie chart
 
plt.pie(class1_students, # Values
        labels = classes, # Labels for each sections
        explode = explode, # To slice the particuler section
        colors =colors, # Color of each section
        autopct = "%0.2f%%", # Show data in percentage with 2 decimal point
        shadow = True, # Showing shadow of pie chart
        radius = 1.4, # Radius to increase or decrease the size of pie chart 
       startangle = 270, # Start angle of first section
        textprops =textprops) 
plt.legend() #to show legend 
plt.show() # To show pie chart only

#plotting pie-chart using even more parameters
plt.figure(figsize = (4,3))
wedgeprops = {"linewidth": 4, 'width':1, "edgecolor":"k"} # Width = 1
plt.pie(
        class1_students, 
        labels = classes, 
        explode = explode, 
        colors = colors, 
        autopct = "%0.2f%%", 
        pctdistance = 0.6, 
        shadow =True, 
        labeldistance = 1.6, 
        startangle = 270,
        radius = 1, 
        counterclock = True, 
        wedgeprops = wedgeprops,
        textprops = textprops,
        center=(2, 3),
        frame=True,
        rotatelabels=True
        ) 
plt.legend()
plt.show()

#plotting pie-chart using even more parameters
plt.figure(figsize = (4,3))
wedgeprops = {"linewidth": 4, 'width':2, "edgecolor":"k"} # Width = 1
plt.pie(
        class1_students, 
        labels = classes, 
        explode = explode, 
        colors = colors, 
        autopct = "%0.2f%%", 
        pctdistance = 0.6, 
        shadow =True, 
        labeldistance = 1.6, 
        startangle = 270,
        radius = 1, 
        counterclock = True, 
        wedgeprops = wedgeprops,
        textprops = textprops,
        center=(2, 3),
        frame=True,
        rotatelabels=True
        ) 
plt.legend()
plt.show()

#plotting pie-chart using even more parameters
plt.figure(figsize = (4,3))
wedgeprops = {"linewidth": 4, 'width':3, "edgecolor":"k"} # Width = 1
plt.pie(
        class1_students, 
        labels = classes, 
        explode = explode, 
        colors = colors, 
        autopct = "%0.2f%%", 
        pctdistance = 0.6, 
        shadow =True, 
        labeldistance = 1.6, 
        startangle = 270,
        radius = 1, 
        counterclock = True, 
        wedgeprops = wedgeprops,
        textprops = textprops,
        center=(2, 3),
        frame=True,
        rotatelabels=True
        ) 
plt.legend()
plt.show()

#plotting pie-chart using even more parameters
plt.figure(figsize = (4,3))
wedgeprops = {"linewidth": 4, 'width':4, "edgecolor":"k"} # Width = 1
plt.pie(
        class1_students, 
        labels = classes, 
        explode = explode, 
        colors = colors, 
        autopct = "%0.2f%%", 
        pctdistance = 0.6, 
        shadow =True, 
        labeldistance = 1.6, 
        startangle = 270,
        radius = 1, 
        counterclock = True, 
        wedgeprops = wedgeprops,
        textprops = textprops,
        center=(2, 3),
        frame=True,
        rotatelabels=True
        ) 
plt.legend()
plt.show()

#plotting for fun
import numpy as np
plt.figure(figsize=(7,4))
#plt.figure(figsize=(16,9)
 
colors = ['r','w','r','w','r','w','r','w','r','w','r','w','r','w','r','w','r','w','r','w']
labels = np.ones(20)
#labels = [1.0,1.0,1.0,1.0,1.0,.........,1.0]
 
plt.pie([1], colors="k", radius = 2.05)
plt.pie(labels, colors=colors, radius = 2.0)
 
plt.pie([1], colors="g", radius = 1.8)
plt.pie([1], colors="y", radius = 1.6)
plt.pie([1], colors="c", radius = 1.3)
plt.pie([1], colors="b", radius = 1.1)
plt.pie([1], colors="m", radius = 0.9)
 
plt.pie([1], colors="b", radius = 0.31)
plt.pie(labels, colors=colors, radius = 0.3)
 
plt.pie([1], colors="w", radius = 0.2)
plt.pie([1], colors="k", radius = 0.1)
 
plt.show()

"""#Matplotlib Scatter Plot

The plt.scatter() function help to plot two-variable datasets in point or a user-defined format. Here, we will be plotting google play store apps scatter plot.
"""

import matplotlib.pyplot as plt #for visualization
import pandas as pd #for data cleaning & analysis

df_playstore = pd.read_csv("/content/gdrive/MyDrive/INDIAN AI PROD/googleplaystore.csv")
df_playstore.shape

"""The dataframe conatins 10841 rows and 13 features."""

df_playstore #let's see the data

"""From the dataset we can see that, it contains both numeric and string type values. For scatter plots we need numeric values only.
we wants only 1000 rows , so for use nrow parameter of pd.DataFrame(). You can work on hole dtaset its your choice.

We are going to plot the scatter plot using 'Rating' as x and 'Reviews' as y.
"""

df_playstore = pd.read_csv("/content/gdrive/MyDrive/INDIAN AI PROD/googleplaystore.csv", 
                                        nrows = 1000)
df_playstore.shape

x = df_playstore["Rating"]
y= df_playstore["Reviews"]

"""## Plotting the Scatter plot

>Syntax : plt.scatter(x,y,s=None,c=None,marker=None,cmap=None,norm=None,vmin=None,vmax=None,alpha=None,linewidths=None,verts=None,edgecolors=None,*,data=None,**kwargs)
"""

plt.scatter(x,y)
plt.show

#showing plot with title and axes label
plt.scatter(x,y)
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews")
plt.show()

"""### Plotting with more parameters"""

plt.figure(figsize=(16,9)) #size ratio
plt.scatter(x,y, c='r', marker="*", s=100, alpha=0.5, linewidths=10, edgecolors='g')
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews")
plt.show()

"""## Two Scatter plots in one"""

plt.figure(figsize = (16,9))
plt.scatter(x,y, c = "r", marker = "*", s = 100, alpha=0.5, linewidths=10,
           edgecolors="g" )#verts="<"
 
plt.scatter(x,df_playstore["Installs"], c = "y", marker = "o", s = 100, alpha=0.5, linewidths=10,
           edgecolors="c" )
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews & Installs")
plt.show()

"""# Matplotlib Save Figure

After creating a plot or chart using the python matplotlib library and need to save and use it further. The matplotlib savefig function is there for this purpose.
"""

import matplotlib.pyplot as plt

""">Syntax: plt.savefig(“File path with name or name”,dpi=None,quality = 99,facecolor=’w’,edgecolor=’w’,orientation=’portrait’,papertype=None,format=None,transparent=False,bbox_inches=None,pad_inches=0.1,frameon=None,metadata=None)

Recommended Value Type for Parameters 

<br>fname : str or file-like object
<br>dpi : [ *None* | scalar > 0 | ‘figure’ ]
<br>quality : [ *None* | 1 <= scalar <= 100 ]
<br>facecolor : color spec or None, optional
<br>edgecolor : color spec or None, optional
<br>orientation : {‘landscape’, ‘portrait’}
<br>papertype : str
— ‘letter’, ‘legal’, ‘executive’, ‘ledger’, ‘a0’ through
‘a10’, ‘b0’ through ‘b10’
<br>format : str —png, pdf, ps, eps and svg
<br>transparent : bool
<br>frameon : bool
<br>bbox_inches : str or `~matplotlib.transforms.Bbox`, optional
<br>pad_inches : scalar, optional
<br>bbox_extra_artists : list of `~matplotlib.artist.Artist`, optional
<br>metadata : dict, optional

Here, we are creating a simple pie chart and save it using plt.savefig() function. The file saves at program file location by default with “.png” format. You can change the file path.
"""

plt.pie([40,30,20]) # plot pie chart
plt.savefig("pie_char") # save above pie chart with name pie_chart
plt.show()

"""## Save Matplolib Figure using some parameters"""

plt.pie([40,30,20])
plt.savefig("pie_char2", # file name
            dpi = 100,  # dot per inch for resolution increase value for more resolution
            quality = 99, # "1 <= value <= 100" 100 for best qulity
            facecolor = "g" # image background color
           )
plt.show()

plt.figure(figsize=(23,27))
 
##----------------------------------------start 
#plt.subplot(3,2,1)
plt.subplot(321)
#********************************************Line Plot
days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
delhi_tem = [36.6, 37, 37.7,39,40.1,43,43.4,45,45.6,40.1,44,45,46.8,47,47.8]
mumbai_tem = [39,39.4,40,40.7,41,42.5,43.5,44,44.9,44,45,45.1,46,47,46]
 
plt.plot(days, delhi_tem, "mo--", linewidth = 3,
        markersize = 10, label = "Delhi tem")
 
plt.plot(days, mumbai_tem, "yo:", linewidth = 3,
        markersize = 10, label = "Mumbai tem}")
 
plt.title("Delhi  & Mumbai Temperature Line Plot", fontsize=15)
plt.xlabel("days",fontsize=13)
plt.ylabel("temperature",fontsize=13)
plt.legend(loc = 4)
plt.grid(color='w', linestyle='-', linewidth=2)
 
#---------------------------------------------------------------end
 
plt.subplot(3,2,2) ##-------------------------------------------------start
#****************************************************************histograms
ml_students_age = np.random.randint(18,45, (100))
py_students_age = np.random.randint(15,40, (100))
bins = [15,20,25,30,35,40,45]
 
plt.hist([ml_students_age, py_students_age], bins, rwidth=0.8, histtype = "bar",
         orientation='vertical', color = ["m", "y"], label = ["ML Student", "Py Student"])
 
plt.title("ML & Py Students age histograms")
plt.xlabel("Students age cotegory")
plt.ylabel("No. Students age")
plt.legend()
#----------------------------------------------------------------------end
 
plt.subplot(3,2,3) ##--------------------------------------------start
#************************************************************Bar Chart
classes = ["Python", "R", "AI", "ML", "DS"]
class1_students = [30, 10, 20, 25, 10] # out of 100 student in each class
class2_students = [40, 5, 20, 20, 10]
class3_students = [35, 5, 30, 15, 15]
classes_index = np.arange(len(classes))
 
width = 0.2
 
plt.barh(classes_index, class1_students, width , color = "b",
        label =" Class 1 Students") #visible=False
 
plt.barh(classes_index + width, class2_students, width , color = "g",
        label =" Class 2 Students") 
 
plt.barh(classes_index + width + width, class3_students, width , color = "y",
        label =" Class 3 Students") 
 
plt.yticks(classes_index + width, classes, rotation = 20)
plt.title("Bar Chart of IAIP Class Bar Chart", fontsize = 18)
plt.ylabel("Classes",fontsize = 15)
plt.xlabel("No. of Students", fontsize = 15)
plt.legend()
#--------------------------------------------------------------------end
 
plt.subplot(3,2,4) ##------------------------------------------------start
#**************************************************************Scatter Plot
df_google_play_store_apps = pd.read_csv("/content/gdrive/MyDrive/INDIAN AI PROD/googleplaystore.csv", nrows = 1000)
x = df_google_play_store_apps["Rating"]
y = df_google_play_store_apps["Reviews"]
plt.scatter(x,y, c = "r", marker = "*", s = 100, alpha=0.5, linewidths=10,
           edgecolors="g" )#verts="<"
 
plt.scatter(x,df_google_play_store_apps["Installs"], c = "y", marker = "o", s = 100, alpha=0.5, linewidths=10,
           edgecolors="c" )
plt.title("Google Play Store Apps Scatter plot")
plt.xlabel("Rating")
plt.ylabel("Reviews & Installs")
#----------------------------------------------------------------------end
 
 
plt.subplot(3,2,5) ##-----------------------------------------start
#*************************************************************Pie plot
classes = ["Python", 'R', 'Machine Learning', 'Artificial Intelligence', 
           'Data Sciece']
class1_students = [45, 15, 35, 25, 30]
explode = [0.03,0,0.1,0,0]
colors = ["c", 'b','r','y','g']
textprops = {"fontsize":15}
 
plt.pie(class1_students, 
        labels = classes, 
        explode = explode, 
        colors =colors, 
        autopct = "%0.2f%%", 
        shadow = True, 
        radius = 1.4,
       startangle = 270, 
        textprops =textprops)
#------------------------------------------------------end
 
 
plt.subplot(3,2,6, projection='polar', facecolor='k' ,frameon=True)
 
plt.savefig("/content/gdrive/MyDrive/INDIAN AI PROD/subplot_figure.png") # save subplots at drive "D" of name subplot_figure
plt.show()

"""# Matplotlib Imshow 
## Read & Show Image Using Imread() & Plt.Imshow()
"""

import matplotlib.pyplot as plt
import matplotlib.image as mpimg # image module for image reading

"""Here, we use mpimg.imread() method."""

img = mpimg.imread("pie_char.png") # give addres of image location
print(img)

"""We can see, when we call img then got numpy array, because mpimg.imread() function read pie_char.png image and stored in numpy array format."""

print("Data type of img > ", type(img))
print("Shape of img > ", img.shape)
print("Dimention of img > ",img.ndim)

"""## Show Image using matplotlib imshow

To show an image, use plt.imshow() function.

>Syntax :plt.imshow(X,cmap=None,norm=None,aspect=None,interpolation=None,alpha=None,vmin=None, vmax=None,origin=None,extent=None,shape=None,filternorm=1,filterrad=4.0,imlim=None,resample=None,url=None,*,data=None,**kwargs)
"""

plt.imshow(img)
plt.show()

#removing the axis and increase figure size
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(img)
plt.show()

"""it looks great but can we can make it look even better by adding a color bar using plt.colorbar() function

## Show Image with Colorbar
"""

plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(img)
plt.colorbar() # Show color bar of above image
plt.show()

"""## Show Image with cmap Parameter
cmap means color map to show a single-channel image in a different color.
"""

single_channel = img[:,:,1] # get single channel data from img
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(single_channel, cmap = "hot") # show image with hot color map
plt.colorbar()
plt.show()

"""If you want to show an image using a folder path, then that is also possible"""

img2 = mpimg.imread("/content/gdrive/MyDrive/INDIAN AI PROD/IMG_4900.JPG")
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(img2)
plt.colorbar()
plt.show()

#image with hot color maps
single_channel2_img = img2[:,:,1]
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(single_channel2_img, cmap="hot")
plt.colorbar()
plt.savefig("model_hot.png")
plt.show()

#image with nipy_spectral color maps (cmap)
single_channel2_img = img2[:,:,1]
plt.figure(figsize=(16,9))
plt.axis("off")
plt.imshow(single_channel2_img, cmap="nipy_spectral")
plt.colorbar()
plt.savefig("model_hot.png")
plt.show()

"""to get cmaps name as a string and split all cmpa name as a single item of a list cmap_name_list."""

cmap = """Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples, Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cividis, cividis_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, hsv_r, inferno, inferno_r, jet, jet_r, magma, magma_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, seismic, seismic_r, spring, spring_r, summer, summer_r, tab10, tab10_r, tab20, tab20_r, tab20b, tab20b_r, tab20c, tab20c_r, terrain, terrain_r, twilight, twilight_r, twilight_shifted, twilight_shifted_r, viridis, viridis_r, winter, winter_r"""
 
cmap_name_list = cmap.split(sep = ", ")
cmap_name_list

"""Using cmap name create a unique address to store or save generated image in a folder."""

save_image_addr_name = []
for i in range(len(cmap_name_list)):
    cmap_str = cmap_name_list[i]
    save_image_addr_name.append("/content/gdrive/MyDrive/INDIAN AI PROD/cmap bird"+"bird_" + cmap_name_list[i] + ".png")
    print(save_image_addr_name[i])

"""Using cmap_name_list and save_image_addr_name generate cmap image and save it define location with unique address."""

for i in range(len(cmap_name_list)): 
    cmap_name = cmap_name_list[i]
    plt.figure(figsize=(16,9))
    plt.axis("off")
     
    print(cmap_name)
 
    plt.imshow(single_channel2_img, cmap=cmap_name)
    #plt.colorbar()
    #save_image_name1 = "D:\\cmap_image\\"+"girl" + cmap_list[i]
    print(save_image_addr_name[i])
    plt.savefig(save_image_addr_name[i], orientation='portrate', facecolor= "k")
    plt.show()

