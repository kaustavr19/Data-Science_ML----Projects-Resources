# -*- coding: utf-8 -*-
"""Who is the next Sunil Chetri.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_GTXh_UReyca4VRxif-fF-f6GL_j8qjH

# Who is the next Sunil Chhetri?

We will use the data from the past two ISL seasons and compare the attributes of Chhetri with other strikers in Indian Football to see who is capable of replacing him.

## Reading & Exploring the Data
"""

#import required libraries
import io
import numpy as np
import pandas as pd
from copy import deepcopy
from google.colab import files

#import plotting libraries
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

uploaded = files.upload()

isl_df = pd.read_csv(io.BytesIO(uploaded['isl_player_final.csv']))
isl_df

isl_df.info()

isl_df.describe().round(1)

isl_df[(isl_df["minutes_played"]>1500) & (isl_df["country_id"] == 1)].shape

isl_df[(isl_df["country_id"] == 1) & (isl_df["position_id"] == 2)]

indian_forwards = deepcopy(isl_df[(isl_df["country_id"] == 1) & (isl_df["position_id"] == 2)])

indian_forwards.reset_index(drop=True, inplace=True)

indian_forwards[indian_forwards["name"].str.contains("Sunil")]

"""## Level the playing field"""

fwd_mins_df = indian_forwards.groupby(["id", "name"])["minutes_played"].sum().reset_index()
fwd_mins_df

px.bar(x="name", y="minutes_played", text="minutes_played", data_frame=fwd_mins_df)

#indian_forwards["goalsPer90"] = indian_forwards["events.goals"].divide(indian_forwards["minutes_played"]).multiply(90)

indian_forwards = indian_forwards[indian_forwards["minutes_played"]>0]

#indian_forwards["goalsPer90"] = indian_forwards["events.goals"].divide(indian_forwards["minutes_played"]).multiply(90)
#indian_forwards["assistsPer90"] = indian_forwards["events.assists"].divide(indian_forwards["minutes_played"]).multiply(90)
#indian_forwards["shots_on_targetPer90"] = indian_forwards["events.shots_on_target"].divide(indian_forwards["minutes_played"]).multiply(90)

per90Cols = ["events.goals", "events.assists", "events.shots", "events.shots_on_target", "events.chances_created",
             "events.fouls_suffered", "touches.total", 'touches.aerial_duel.won']
for col in per90Cols:
  indian_forwards[col+"Per90"] = indian_forwards[col].divide(indian_forwards["minutes_played"]).multiply(90)

#use list comprehension
[i + "Per90" for i in per90Cols]

#same as
#cols_for_radar = []
#for i in per90Cols:
#    cols_for_radar.append(i + "Per90")
#print(cols_for_radar)

cols_for_radar = [i + "Per90" for i in per90Cols]
cols_for_radar

#sunil chetri's per90 stats
indian_forwards.loc[(indian_forwards["id"] == 19150), cols_for_radar].sum()

"""### Chhetri's Performance
Let's use some key metrics to assess Chhetri's performance

#### What is a Radar Plot?
r --> All the values in the Radar Plot

theta --> All the labels in the Radar Plot

#### Radar Plot for Chhetri's Performance
"""

fig = px.line_polar(indian_forwards, r=indian_forwards.loc[(indian_forwards["id"] == 19150), cols_for_radar].sum(),
                    theta = cols_for_radar, line_close = True)
fig.update_traces(fill = 'toself')
fig.show()

"""it produces such a plot for the difference in units. to avoid it we have to normalize the data."""

#Normalization of values
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
indian_forwards[cols_for_radar] = scaler.fit_transform(indian_forwards[cols_for_radar])

"""#### Normalised Radar Plot for Chhetri's performance"""

fig = px.line_polar(indian_forwards, r=indian_forwards.loc[(indian_forwards["id"] == 19150), cols_for_radar].sum(),
                    theta = cols_for_radar, line_close = True)
fig.update_traces(fill = 'toself')
fig.show()

"""#### Radar Plot for the Others"""

for i, row in indian_forwards.iterrows():
  print("Index location --> ",i,"\n")
  print(row.values, "\n")

for i, row in indian_forwards.iterrows():
  print(row["name"])
  fig = px.line_polar(indian_forwards, r=indian_forwards.loc[(indian_forwards["id"] == row["id"]), cols_for_radar].sum(),
                    theta = cols_for_radar, line_close = True, title=row["name"])
  fig.update_traces(fill = 'toself')
  fig.show()

"""## The Replacement Finale"""

#removing duplicates
ind_fwds_id_names = indian_forwards.drop_duplicates(subset=["id"])[["id", "name"]]

ind_fwds_id_names.shape

ind_fwds_id_names.head()

isl_max = indian_forwards[cols_for_radar].max().max()

import plotly.graph_objects as go

for i, row in ind_fwds_id_names.iterrows():
    if row["id"] == 19150:
        continue
    print(row["name"])
    # Initiate the plotly go figure
    fig = go.Figure()
    # Add Radar plots for different players:
    fig.add_trace(go.Scatterpolar(
        r=indian_forwards.loc[(indian_forwards["id"] == 19150), cols_for_radar].sum(),
        theta=cols_for_radar,
        fill='toself',
        name='Sunil Chhetri'))
    fig.add_trace(go.Scatterpolar(
        r=indian_forwards.loc[(indian_forwards["id"] == row["id"]), cols_for_radar].sum(),
        theta=cols_for_radar,
        fill='toself',
        name=row["name"]))
    # Additional properties for the plot:
    fig.update_layout(
        title="Sunil Chhetri vs " + row["name"],
    polar=dict(
        radialaxis=dict(
        visible=True,
        range=[0, isl_max]
        )),
    showlegend=True
    )
    fig.show()

